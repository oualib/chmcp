name: Publish to PyPI

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to publish to'
        required: true
        default: 'testpypi'
        type: choice
        options:
          - testpypi
          - pypi
      version_check:
        description: 'Skip version validation'
        required: false
        default: false
        type: boolean
  release:
    types: [published]

env:
  PYTHON_VERSION: "3.13"

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_publish: ${{ steps.check.outputs.should_publish }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for version validation

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Setup Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Extract version from pyproject.toml
        id: version
        run: |
          VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Version: $VERSION"

      - name: Check if version exists on PyPI
        id: check
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ENVIRONMENT="${{ github.event.inputs.environment || 'pypi' }}"
          
          if [ "$ENVIRONMENT" = "testpypi" ]; then
            PYPI_URL="https://test.pypi.org/pypi/mcp-clickhouse-cloud/$VERSION/json"
          else
            PYPI_URL="https://pypi.org/pypi/mcp-clickhouse-cloud/$VERSION/json"
          fi
          
          echo "üîç Checking if version $VERSION exists on $ENVIRONMENT..."
          
          if curl -s "$PYPI_URL" | grep -q "Not Found\|404"; then
            echo "‚úÖ Version $VERSION not found on $ENVIRONMENT, proceeding with publish"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            if [ "${{ github.event.inputs.version_check }}" = "true" ]; then
              echo "‚ö†Ô∏è Version $VERSION already exists on $ENVIRONMENT, but skipping check as requested"
              echo "should_publish=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Version $VERSION already exists on $ENVIRONMENT"
              echo "should_publish=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi
          echo "‚úÖ Version format is valid: $VERSION"

      - name: Validate changelog entry (for production releases)
        if: github.event.inputs.environment == 'pypi' || github.event_name == 'release'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [ -f CHANGELOG.md ] && ! grep -q "## \[$VERSION\]" CHANGELOG.md; then
            echo "‚ö†Ô∏è No changelog entry found for version $VERSION"
            echo "Consider adding a changelog entry before publishing to production"
          else
            echo "‚úÖ Changelog entry found or CHANGELOG.md doesn't exist"
          fi

      - name: Run linting and tests
        run: |
          echo "üîç Running linting..."
          uv run ruff check .
          
          echo "üîç Running format check..."
          uv run ruff format --check .
          
          echo "üß™ Running tests..."
          uv run pytest tests/ -x --tb=short

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 10
    if: needs.validate.outputs.should_publish == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Setup Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync

      - name: Build package
        run: |
          echo "üî® Building package..."
          uv build
          
          echo "üì¶ Built files:"
          ls -la dist/
          
          echo "üìä Package info:"
          uv run python -c "
          import tomllib
          config = tomllib.load(open('pyproject.toml', 'rb'))
          project = config['project']
          print(f'Name: {project[\"name\"]}')
          print(f'Version: {project[\"version\"]}')
          print(f'Description: {project[\"description\"]}')
          print(f'Author: {project[\"authors\"][0][\"name\"]} <{project[\"authors\"][0][\"email\"]}>')
          "

      - name: Verify package contents
        run: |
          echo "üîç Verifying package contents..."
          uv run python -m tarfile -l dist/*.tar.gz | head -20
          
          echo "üîç Checking wheel contents..."
          uv run python -c "
          import zipfile
          import glob
          
          wheel_files = glob.glob('dist/*.whl')
          if wheel_files:
              with zipfile.ZipFile(wheel_files[0], 'r') as zf:
                  files = zf.namelist()[:20]  # Show first 20 files
                  print('Wheel contents (first 20 files):')
                  for f in files:
                      print(f'  {f}')
          "

      - name: Test package installation
        run: |
          echo "üß™ Testing package installation..."
          
          # Create fresh environment
          uv venv test-install
          source test-install/bin/activate
          
          # Install from wheel
          uv pip install dist/*.whl
          
          # Test import
          python -c "
          import mcp_clickhouse_cloud
          print(f'‚úÖ Package imports successfully')
          print(f'Version: {mcp_clickhouse_cloud.__version__}')
          print(f'Author: {mcp_clickhouse_cloud.__author__}')
          "
          
          # Test CLI
          python -m mcp_clickhouse_cloud.main --help >/dev/null && echo "‚úÖ CLI works"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-${{ needs.validate.outputs.version }}
          path: dist/
          retention-days: 30

  publish-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [validate, build]
    timeout-minutes: 10
    if: |
      needs.validate.outputs.should_publish == 'true' && 
      (github.event.inputs.environment == 'testpypi' || 
       (github.event.inputs.environment == 'pypi' && github.event_name == 'workflow_dispatch'))
    environment:
      name: testpypi
      url: "https://test.pypi.org/p/mcp-clickhouse-cloud"
    permissions:
      id-token: write
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-${{ needs.validate.outputs.version }}
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
          print-hash: true

      - name: Verify TestPyPI publication
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          echo "‚è≥ Waiting for package to be available on TestPyPI..."
          
          for i in {1..12}; do
            if pip index versions --index-url https://test.pypi.org/simple/ mcp-clickhouse-cloud | grep -q "$VERSION"; then
              echo "‚úÖ Package $VERSION is available on TestPyPI"
              break
            fi
            echo "‚è≥ Waiting... ($i/12)"
            sleep 10
          done
          
          echo "üîó TestPyPI URL: https://test.pypi.org/project/mcp-clickhouse-cloud/$VERSION/"

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate, build, publish-testpypi]
    timeout-minutes: 10
    if: |
      needs.validate.outputs.should_publish == 'true' && 
      (github.event.inputs.environment == 'pypi' || github.event_name == 'release') &&
      !failure()
    environment:
      name: pypi
      url: "https://pypi.org/p/mcp-clickhouse-cloud"
    permissions:
      id-token: write
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-${{ needs.validate.outputs.version }}
          path: dist/

      - name: Final safety check
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          echo "üö® FINAL SAFETY CHECK üö®"
          echo "About to publish version $VERSION to PyPI"
          echo "This action is IRREVERSIBLE"
          echo "Package contents:"
          ls -la dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          print-hash: true

      - name: Verify PyPI publication
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          echo "‚è≥ Waiting for package to be available on PyPI..."
          
          for i in {1..12}; do
            if pip index versions mcp-clickhouse-cloud | grep -q "$VERSION"; then
              echo "‚úÖ Package $VERSION is available on PyPI"
              break
            fi
            echo "‚è≥ Waiting... ($i/12)"
            sleep 10
          done
          
          echo "üéâ Publication successful!"
          echo "üîó PyPI URL: https://pypi.org/project/mcp-clickhouse-cloud/$VERSION/"

  create-release-notes:
    name: Create Release Notes
    runs-on: ubuntu-latest
    needs: [validate, publish-pypi]
    timeout-minutes: 5
    if: needs.publish-pypi.result == 'success' && github.event_name == 'release'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update release with PyPI links
        uses: actions/github-script@v7
        with:
          script: |
            const version = "${{ needs.validate.outputs.version }}";
            const release = context.payload.release;
            
            const additionalContent = `
            
            ## üì¶ Installation
            
            \`\`\`bash
            pip install mcp-clickhouse-cloud==${version}
            # or
            uv add mcp-clickhouse-cloud==${version}
            \`\`\`
            
            ## üîó Links
            
            - üì¶ [PyPI Package](https://pypi.org/project/mcp-clickhouse-cloud/${version}/)
            - üìö [Documentation](https://github.com/oualib/mcp-clickhouse-cloud#readme)
            - üêõ [Report Issues](https://github.com/oualib/mcp-clickhouse-cloud/issues)
            `;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: release.body + additionalContent
            });

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [validate, publish-pypi]
    if: always() && needs.validate.outputs.should_publish == 'true'
    
    steps:
      - name: Summary
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          ENVIRONMENT="${{ github.event.inputs.environment || 'pypi' }}"
          
          echo "## üì¶ Publication Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Version | \`$VERSION\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | $ENVIRONMENT |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | ${{ needs.publish-pypi.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.publish-pypi.result }}" = "success" ]; then
            echo "| PyPI URL | https://pypi.org/project/mcp-clickhouse-cloud/$VERSION/ |" >> $GITHUB_STEP_SUMMARY
            echo "| Install Command | \`pip install mcp-clickhouse-cloud==$VERSION\` |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üéâ **Publication successful!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ùå **Publication failed!**" >> $GITHUB_STEP_SUMMARY
          fi